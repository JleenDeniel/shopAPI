// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package _go

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShopAPIClient is the client API for ShopAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopAPIClient interface {
	AddToCart(ctx context.Context, in *AddToCartRequest, opts ...grpc.CallOption) (*AddToCartResponse, error)
	GetCartConsist(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetCartConsistResponse, error)
	DeleteFromCart(ctx context.Context, in *DeleteFromCartRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type shopAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewShopAPIClient(cc grpc.ClientConnInterface) ShopAPIClient {
	return &shopAPIClient{cc}
}

func (c *shopAPIClient) AddToCart(ctx context.Context, in *AddToCartRequest, opts ...grpc.CallOption) (*AddToCartResponse, error) {
	out := new(AddToCartResponse)
	err := c.cc.Invoke(ctx, "/shop.shopAPI/addToCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAPIClient) GetCartConsist(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetCartConsistResponse, error) {
	out := new(GetCartConsistResponse)
	err := c.cc.Invoke(ctx, "/shop.shopAPI/getCartConsist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAPIClient) DeleteFromCart(ctx context.Context, in *DeleteFromCartRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/shop.shopAPI/deleteFromCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopAPIServer is the server API for ShopAPI service.
// All implementations must embed UnimplementedShopAPIServer
// for forward compatibility
type ShopAPIServer interface {
	AddToCart(context.Context, *AddToCartRequest) (*AddToCartResponse, error)
	GetCartConsist(context.Context, *empty.Empty) (*GetCartConsistResponse, error)
	DeleteFromCart(context.Context, *DeleteFromCartRequest) (*empty.Empty, error)
	mustEmbedUnimplementedShopAPIServer()
}

// UnimplementedShopAPIServer must be embedded to have forward compatible implementations.
type UnimplementedShopAPIServer struct {
}

func (UnimplementedShopAPIServer) AddToCart(context.Context, *AddToCartRequest) (*AddToCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCart not implemented")
}
func (UnimplementedShopAPIServer) GetCartConsist(context.Context, *empty.Empty) (*GetCartConsistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartConsist not implemented")
}
func (UnimplementedShopAPIServer) DeleteFromCart(context.Context, *DeleteFromCartRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromCart not implemented")
}
func (UnimplementedShopAPIServer) mustEmbedUnimplementedShopAPIServer() {}

// UnsafeShopAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopAPIServer will
// result in compilation errors.
type UnsafeShopAPIServer interface {
	mustEmbedUnimplementedShopAPIServer()
}

func RegisterShopAPIServer(s grpc.ServiceRegistrar, srv ShopAPIServer) {
	s.RegisterService(&ShopAPI_ServiceDesc, srv)
}

func _ShopAPI_AddToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAPIServer).AddToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.shopAPI/addToCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAPIServer).AddToCart(ctx, req.(*AddToCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAPI_GetCartConsist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAPIServer).GetCartConsist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.shopAPI/getCartConsist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAPIServer).GetCartConsist(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAPI_DeleteFromCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFromCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAPIServer).DeleteFromCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.shopAPI/deleteFromCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAPIServer).DeleteFromCart(ctx, req.(*DeleteFromCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopAPI_ServiceDesc is the grpc.ServiceDesc for ShopAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shop.shopAPI",
	HandlerType: (*ShopAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addToCart",
			Handler:    _ShopAPI_AddToCart_Handler,
		},
		{
			MethodName: "getCartConsist",
			Handler:    _ShopAPI_GetCartConsist_Handler,
		},
		{
			MethodName: "deleteFromCart",
			Handler:    _ShopAPI_DeleteFromCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shop.proto",
}
